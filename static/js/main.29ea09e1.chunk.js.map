{"version":3,"sources":["constants/TableConstants.ts","util/stats.ts","util/parsers.ts","api/TablesApi.ts","components/Page.tsx","components/TableList.tsx","containers/TableListContainer.tsx","components/InvalidTable.tsx","components/HistogramChart.tsx","components/StatTooltip.tsx","components/TableViewer.tsx","containers/TableViewerContainer.tsx","App.tsx","index.tsx"],"names":["TableConstants","getHistogram","count","max","min","values","col","numBuckets","Math","ceil","sqrt","step","buckets","Array","fill","i","v","isNumber","bucket","abs","round","decimals","toFixed","calculateStats","map","row","nullCount","sum","sumOfSquares","length","numeric","isNil","console","log","mean","stdDev","histogram","calculateStatsForCol","splitPop","str","split","ar","pop","parseValue","isNaN","tableCache","Cache","contentsCache","fetchTables","fetch","then","resp","json","data","forEach","d","set","name","fetchTableCSV","url","cached","get","Promise","resolve","text","csv","columns","String","slice","stats","parseTable","TablesApi","fetchTableContents","tableName","cachedTable","tables","table","find","t","PageContainer","styled","div","Page","props","history","useHistory","breadcrumbs","onClick","title","push","undefined","items","children","Container","PaddedCard","Card","TableList","key","interactive","elevation","viewTable","to","row_count","TableListContainer","React","useState","setTables","useEffect","catch","InvalidTable","icon","action","TooltipContent","HistogramChart","value","HistogramTooltip","active","payload","label","width","height","dataKey","content","StatText","StatTooltip","statElements","className","Classes","TOOLTIP_INDICATOR","TableContainer","ResponsiveTable","Table","TableViewer","sort","setSort","sortedValues","setSortedValues","sorted","orderBy","colIdx","dir","cellRenderer","useCallback","sortMenuRenderer","setSortDir","headerRenderer","rowStats","menuRenderer","numRows","columnHeaderCellRenderer","TableViewerContainer","useParams","tableContents","setTableContents","invalidTable","setInvalidTable","loading","setLoading","contents","App","path","exact","intent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29ea09e1.chunk.js","sourcesContent":["export const TableConstants = {\n  TABLES_URL:\n    \"https://s3-us-west-2.amazonaws.com/tecton.ai.public/coding_exercise_1/tables.json\",\n}\n","import { Value, Stats, Histogram } from \"../models/TableData\"\nimport { isNumber, isNil } from \"lodash\"\n\n/**\n * All logic for stats and histogram calculation go here.\n */\n\nconst getHistogram = (\n  count: number,\n  max: number,\n  min: number,\n  values: Value[][],\n  col: number\n): Histogram => {\n  // Minimum of 5 buckets. Bucket params need tuning.\n  const numBuckets = Math.max(7, Math.ceil(Math.sqrt(count)))\n  const step = (max - min) / numBuckets\n  const buckets: number[] = new Array(numBuckets + 1).fill(0)\n\n  // Go through each value and find what bucket it belongs in.\n  for (let i = 0; i < count; i++) {\n    const v = values[i][col]\n    if (isNumber(v)) {\n      const bucket = Math.ceil(Math.abs((v - min) / step))\n      buckets[bucket] = buckets[bucket] + 1\n    }\n  }\n\n  return { step, buckets, min, max }\n}\n\nconst calculateStatsForCol = (values: Value[][], col: number): Stats => {\n  // Initialize the stats values.\n  let nullCount = 0\n  let min = 0\n  let max = 0\n  let sum = 0\n  let sumOfSquares = 0 // Needed for stdDev.\n  let count = values.length\n  // Flag if we've found at least a single number.\n  let numeric = false\n\n  // Go through each value and iteratively update the values.\n  for (let i = 0; i < count; i++) {\n    const v: Value = values[i][col]\n    if (isNil(v)) {\n      console.log(values, i, col, values[i])\n      nullCount++\n    }\n    if (isNumber(v)) {\n      numeric = true\n      min = Math.min(min, v)\n      max = Math.max(max, v)\n      sum += v\n      sumOfSquares += v * v\n    }\n  }\n\n  const mean = sum / count\n  // This formula allows us to calculate stdDev without iterating through the array again.\n  // TODO: Check that this is correct? :)\n  const stdDev = round(Math.sqrt(sumOfSquares / count - mean * mean), 4)\n\n  return {\n    nullCount,\n    min,\n    max,\n    mean: round(mean, 4),\n    stdDev,\n    histogram: getHistogram(count, max, min, values, col),\n    numeric,\n  }\n}\n\n// Smooth rounding for displaying optional decimals.\n// e.g. round(1) === 1, round(.123) = .12\nexport const round = (v: number, decimals = 2) => {\n  return +v.toFixed(decimals)\n}\n\nexport const calculateStats = (values: Value[][]): Stats[] => {\n  return values[0].map((row, i) => calculateStatsForCol(values, i))\n}\n","import { TableContents, Value } from \"../models/TableData\"\nimport { calculateStats } from \"./stats\"\n\n/**\n * Contains utils for parsing raw data into our models.\n */\n\n// A util to split and pop the last value.\n// Useful for when the last character is the thing you're splitting on.\n// Ex: splitPop(\"1;2;\", \";\") => [1,2]\nconst splitPop = (str: string, split: string) => {\n  const ar = str.split(split)\n  ar.pop()\n  return ar\n}\n\n// Parse anything that looks like a number into a number.\nconst parseValue = (v: any): Value => {\n  return isNaN(v) ? v : +v\n}\n\n// Parse a csv string into a table.\nexport const parseTable = (csv: string): TableContents => {\n  const [columns, ...values] = splitPop(csv, \"\\n\").map((row) =>\n    splitPop(row, \",\").map(parseValue)\n  )\n  return {\n    // Make sure cols are strings.\n    columns: columns.map(String),\n    // Drop the last elem to deal with CSV ennding w\n    values: values.slice(0, values.length - 1),\n    stats: calculateStats(values),\n  }\n}\n","import Cache from \"lru-cache\"\nimport { TableConstants } from \"../constants/TableConstants\"\nimport { TableContents, TableData } from \"../models/TableData\"\nimport { parseTable } from \"../util/parsers\"\n\n/**\n * This file contains a caching API for fetching all of our table-related data.\n * Also handles parsing the raw values into a more manageable format.\n */\n\n// Caches for avoiding extra fetches.\nconst tableCache = new Cache<string, TableData>(50)\nconst contentsCache = new Cache<string, TableContents>(50)\n\n// Fetch the list of tables.\n// Not cached.\nconst fetchTables = (): Promise<TableData[]> => {\n  return fetch(TableConstants.TABLES_URL)\n    .then((resp) => resp.json())\n    .then((data: TableData[]) => {\n      data.forEach((d) => tableCache.set(d.name, d))\n      return data\n    })\n}\n\n// Fetch and parse the CSV from the provided url.\n// May return a cached value.\nconst fetchTableCSV = (url: string): Promise<TableContents> => {\n  const cached = contentsCache.get(url)\n  if (cached) {\n    return Promise.resolve(cached)\n  }\n  return fetch(url)\n    .then((resp) => resp.text())\n    .then((csv) => parseTable(csv))\n    .then((values) => {\n      contentsCache.set(url, values)\n      return values\n    })\n}\n\n// Fetch table contents for the provided table name.\n// Assumes tableName is a unique key for the data set.\n// Returns null if an invalid table name is provided\n// May return a cached value.\nconst fetchTableContents = (\n  tableName: string\n): Promise<TableContents | null> => {\n  const cachedTable = tableCache.get(tableName)\n  if (cachedTable) {\n    return fetchTableCSV(cachedTable.url)\n  } else {\n    return fetchTables().then((tables) => {\n      const table = tables.find((t) => t.name === tableName)\n      // If the table name wasn't found return null so the caller can handle that case.\n      if (table) {\n        return fetchTableCSV(table.url)\n      } else {\n        return null\n      }\n    })\n  }\n}\n\nconst TablesApi = {\n  fetchTables,\n  fetchTableContents,\n}\n\nexport default TablesApi\n","import React from \"react\"\n\nimport {\n  Navbar,\n  NavbarHeading,\n  NavbarDivider,\n  NavbarGroup,\n  Breadcrumbs,\n  IBreadcrumbProps,\n} from \"@blueprintjs/core\"\nimport styled from \"@emotion/styled\"\nimport { useHistory } from \"react-router\"\n\nconst PageContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  position: absolute;\n`\n\ninterface Props {\n  title?: string\n}\n\n// For rendering a single page anywhere in our app.\nconst Page: React.FC<Props> = (props) => {\n  const history = useHistory()\n  const goHome = () => history.push(\"/\")\n  const breadcrumbs: IBreadcrumbProps[] = [\n    {\n      onClick: props.title ? goHome : undefined,\n      text: \"Index\",\n    },\n  ]\n  if (props.title) {\n    breadcrumbs.push({\n      text: props.title,\n    })\n  }\n  return (\n    <PageContainer>\n      <Navbar>\n        <NavbarGroup>\n          <NavbarHeading>Table Viewer</NavbarHeading>\n          <NavbarDivider />\n          <Breadcrumbs items={breadcrumbs} />\n        </NavbarGroup>\n      </Navbar>\n      {props.children}\n    </PageContainer>\n  )\n}\n\nexport default Page\n","import { Card, H5 } from \"@blueprintjs/core\"\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { TableData } from \"../models/TableData\"\n\ninterface Props {\n  tables: TableData[]\n  viewTable(table: TableData): void\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst PaddedCard = styled(Card)`\n  margin: 16px;\n  max-width: 800px;\n  min-width: 400px;\n`\n\n// Renders a clickable list of tables for navigation.\nconst TableList: React.FC<Props> = (props) => {\n  return (\n    <Container>\n      {props.tables.map((table) => (\n        <PaddedCard\n          key={table.url}\n          interactive\n          elevation={0}\n          onClick={() => props.viewTable(table)}\n        >\n          <H5>\n            <Link to={`/${table.name}`}>{table.name}</Link>\n          </H5>\n          <p>Row count: {table.row_count}</p>\n        </PaddedCard>\n      ))}\n    </Container>\n  )\n}\n\nexport default TableList\n","import React from \"react\"\nimport { useHistory } from \"react-router\"\nimport TablesApi from \"../api/TablesApi\"\nimport Page from \"../components/Page\"\nimport TableList from \"../components/TableList\"\nimport { TableData } from \"../models/TableData\"\n\n// Fetch the list of tables and render them.\nconst TableListContainer = () => {\n  const history = useHistory()\n\n  const [tables, setTables] = React.useState<TableData[]>([])\n\n  React.useEffect(() => {\n    TablesApi.fetchTables()\n      .then(setTables)\n      .catch(() => history.push(\"/error\"))\n  }, [history])\n\n  const viewTable = (table: TableData) => {\n    history.push(`/table/${table.name}`)\n  }\n\n  return (\n    <Page>\n      <TableList tables={tables} viewTable={viewTable} />\n    </Page>\n  )\n}\n\nexport default TableListContainer\n","import { NonIdealState } from \"@blueprintjs/core\"\nimport React from \"react\"\nimport { Link } from \"react-router-dom\"\n\ninterface Props {\n  tableName: string\n}\n\n// Placeholder for an invalid requested table.\nconst InvalidTable: React.FC<Props> = (props) => {\n  return (\n    <NonIdealState\n      icon=\"search\"\n      title={`Invalid table ${props.tableName}`}\n      action={<Link to=\"/\">Go Back</Link>}\n    />\n  )\n}\n\nexport default InvalidTable\n","import React from \"react\"\nimport { Histogram } from \"../models/TableData\"\nimport { BarChart, Bar, Tooltip } from \"recharts\"\nimport styled from \"@emotion/styled\"\nimport { round } from \"lodash\"\n\ninterface Props {\n  histogram: Histogram\n}\n\nconst TooltipContent = styled.div`\n  background-color: white;\n  padding: 2px 4px;\n  border: 1px solid blue;\n  border-radius: 4px;\n  max-width: 120px;\n  line-height: initial;\n`\n\n// Renders a mini bar chart representing a histogram.\nconst HistogramChart: React.FC<Props> = (props) => {\n  const { histogram } = props\n\n  // Format the data for a bar chart, storing the bar's value and the\n  // histogram range it represents.\n  const data = histogram.buckets.map((value, i) => {\n    let min = round(histogram.min + histogram.step * i)\n    let max = round(histogram.min + histogram.step * (i + 1))\n    return {\n      value,\n      min,\n      max,\n    }\n  })\n\n  // A custom tooltip to allow Recharts to display the range of values.\n  const HistogramTooltip: React.FC<any> = ({ active, payload, label }) => {\n    if (!active) {\n      return <div />\n    }\n    const { min, max, value } = payload[0].payload\n    return (\n      <TooltipContent>\n        {min} to {max} Count: {value}\n      </TooltipContent>\n    )\n  }\n\n  return (\n    <BarChart width={150} height={80} data={data}>\n      <Bar dataKey=\"value\" fill=\"#8884d8\" />\n      <Tooltip content={<HistogramTooltip />} />\n    </BarChart>\n  )\n}\n\nexport default HistogramChart\n","import { Classes, Tooltip } from \"@blueprintjs/core\"\nimport styled from \"@emotion/styled\"\nimport React from \"react\"\nimport { Stats } from \"../models/TableData\"\n\nconst StatText = styled.div`\n  font-size: 11px;\n  overflow: hidden;\n  width: 100%;\n  white-space: nowrap;\n`\n\nconst Container = styled.div`\n  padding: 1px 6px;\n`\n\ninterface Props {\n  stats: Stats\n}\n\n// Tooltip for displaying a stats object.\nconst StatTooltip: React.FC<Props> = (props) => {\n  const { stats } = props\n  const statElements = (\n    <div>\n      <StatText>Null Count: {stats.nullCount}</StatText>\n      <StatText>Min: {stats.min}</StatText>\n      <StatText>Max: {stats.max}</StatText>\n      <StatText>Mean: {stats.mean}</StatText>\n      <StatText>StdDev: {stats.stdDev}</StatText>\n    </div>\n  )\n  return (\n    <Container>\n      <Tooltip className={Classes.TOOLTIP_INDICATOR} content={statElements}>\n        Statistics\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default StatTooltip\n","import { Menu, MenuItem } from \"@blueprintjs/core\"\nimport { Cell, Column, ColumnHeaderCell, Table } from \"@blueprintjs/table\"\nimport styled from \"@emotion/styled\"\nimport { orderBy } from \"lodash\"\nimport React from \"react\"\nimport { TableContents, Value } from \"../models/TableData\"\nimport HistogramChart from \"./HistogramChart\"\nimport StatTooltip from \"./StatTooltip\"\n\ninterface Props {\n  table: TableContents\n}\n\nconst TableContainer = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`\n\nconst ResponsiveTable = styled(Table)`\n  flex-grow: 1;\n`\n\ninterface Sort {\n  colIdx: number\n  dir: \"asc\" | \"desc\"\n}\n\n// Renders sortable a table to view and interact with CSVs.\nconst TableViewer: React.FC<Props> = (props) => {\n  const {\n    table,\n    table: { columns, stats },\n  } = props\n\n  const [sort, setSort] = React.useState<Sort | null>(null)\n  const [sortedValues, setSortedValues] = React.useState<Value[][]>([[]])\n\n  // Reactively sort the table when either the values or sort changes.\n  React.useEffect(() => {\n    if (sort) {\n      const sorted = orderBy(\n        table.values,\n        [(row) => row[sort.colIdx]],\n        [sort.dir]\n      )\n      console.log(sorted)\n      setSortedValues(sorted)\n    } else {\n      setSortedValues(table.values)\n    }\n  }, [table.values, sort])\n\n  // Memoize this, it gets called a lot.\n  const cellRenderer = React.useCallback(\n    (row: number, col: number) => {\n      return <Cell>{sortedValues[row][col]}</Cell>\n    },\n    [sortedValues]\n  )\n\n  const sortMenuRenderer = (colIdx?: number) => {\n    const setSortDir = (dir: \"asc\" | \"desc\") => {\n      if (colIdx) {\n        setSort({\n          colIdx,\n          dir,\n        })\n      }\n    }\n    return (\n      <Menu>\n        <MenuItem\n          icon=\"sort-asc\"\n          onClick={() => setSortDir(\"asc\")}\n          text=\"Sort Asc\"\n        />\n        <MenuItem\n          icon=\"sort-desc\"\n          onClick={() => setSortDir(\"desc\")}\n          text=\"Sort Desc\"\n        />\n      </Menu>\n    )\n  }\n\n  const headerRenderer = (row: number) => {\n    const rowStats = stats[row]\n    const histogram = rowStats.histogram\n    return (\n      <ColumnHeaderCell name={columns[row]} menuRenderer={sortMenuRenderer}>\n        {rowStats.numeric ? (\n          <>\n            <HistogramChart histogram={histogram} />\n            <StatTooltip stats={rowStats} />\n          </>\n        ) : null}\n      </ColumnHeaderCell>\n    )\n  }\n\n  return (\n    <TableContainer>\n      <ResponsiveTable numRows={sortedValues.length}>\n        {columns.map((col, i) => {\n          return (\n            <Column\n              key={i}\n              cellRenderer={cellRenderer}\n              columnHeaderCellRenderer={headerRenderer}\n            />\n          )\n        })}\n      </ResponsiveTable>\n    </TableContainer>\n  )\n}\n\nexport default TableViewer\n","import React from \"react\"\nimport { TableContents } from \"../models/TableData\"\nimport TablesApi from \"../api/TablesApi\"\nimport Page from \"../components/Page\"\nimport { useParams, useHistory } from \"react-router\"\nimport InvalidTable from \"../components/InvalidTable\"\nimport TableViewer from \"../components/TableViewer\"\nimport { Spinner } from \"@blueprintjs/core\"\n\n// Fetch the table's data, as provided in the URL.\n// If the table in the URL is invalid alert the user.\nconst TableViewerContainer = () => {\n  const { tableName } = useParams()\n  const history = useHistory()\n  const [\n    tableContents,\n    setTableContents,\n  ] = React.useState<TableContents | null>(null)\n  const [invalidTable, setInvalidTable] = React.useState<boolean>(false)\n  const [loading, setLoading] = React.useState<boolean>(true)\n\n  React.useEffect(() => {\n    setInvalidTable(false)\n    setLoading(true)\n    TablesApi.fetchTableContents(tableName)\n      .then((contents) => {\n        // If contents are null the table was invalid.\n        if (contents) {\n          setTableContents(contents)\n        } else {\n          setInvalidTable(true)\n        }\n        setLoading(false)\n      })\n      .catch(() => history.push(\"/error\"))\n  }, [tableName, history])\n\n  return (\n    <Page title={tableName}>\n      {loading ? (\n        <Spinner />\n      ) : invalidTable || !tableContents ? (\n        <InvalidTable tableName={tableName} />\n      ) : (\n        <TableViewer table={tableContents} />\n      )}\n    </Page>\n  )\n}\n\nexport default TableViewerContainer\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport TableListContainer from \"./containers/TableListContainer\"\nimport TableViewerContainer from \"./containers/TableViewerContainer\"\nimport { Callout } from \"@blueprintjs/core\"\n\n// Mostly just sets up our routes.\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <TableListContainer />\n        </Route>\n        <Route path=\"/error\" exact>\n          <Callout intent=\"danger\">Server error, try again later.</Callout>\n        </Route>\n        <Route path=\"/table/:tableName\" exact>\n          <TableViewerContainer />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\n// Set up global stylesheets.\nimport \"normalize.css\"\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"@blueprintjs/table/lib/css/table.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}